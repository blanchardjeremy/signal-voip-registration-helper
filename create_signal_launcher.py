#!/usr/bin/env python3
"""
Signal App Builder
Creates a .app file that launches Signal Desktop with a specific profile directory
"""

import os
import sys
import argparse
import subprocess
import tempfile
from pathlib import Path
from typing import Optional


class SignalAppBuilder:
  def __init__(self):
    self.signal_app_path = "/Applications/Signal.app/Contents/MacOS/Signal"
    self.script_dir = Path(__file__).parent.absolute()
    
  def check_signal_installed(self) -> bool:
    """Check if Signal Desktop is installed"""
    if not os.path.exists(self.signal_app_path):
      print(f"‚ùå Signal Desktop not found at: {self.signal_app_path}")
      print("Please install Signal Desktop from: https://signal.org/download")
      return False
    
    print(f"‚úÖ Signal Desktop found at: {self.signal_app_path}")
    return True
  
  def create_app_bundle(self, phone_number: str, output_dir: str = None, app_name: str = None) -> str:
    """Create a .app bundle for launching Signal with specific profile"""
    if not self.check_signal_installed():
      sys.exit(1)
    
    # Clean phone number for directory name
    profile_name = phone_number.replace('+', '').replace('-', '').replace(' ', '')
    
    # Use custom app name or default to phone number
    if app_name:
      app_bundle_name = f"Signal-{app_name}.app"
      display_name = app_name
    else:
      app_bundle_name = f"Signal-{profile_name}.app"
      display_name = profile_name
    
    # Determine output directory
    if output_dir:
      output_path = Path(output_dir)
    else:
      output_path = self.script_dir
    
    app_bundle_path = output_path / app_bundle_name
    
    # Remove existing app bundle if it exists
    if app_bundle_path.exists():
      print(f"üóëÔ∏è  Removing existing app: {app_bundle_path}")
      subprocess.run(['rm', '-rf', str(app_bundle_path)], check=True)
    
    # Create app bundle structure
    print(f"üìÅ Creating app bundle: {app_bundle_path}")
    contents_dir = app_bundle_path / "Contents"
    macos_dir = contents_dir / "MacOS"
    resources_dir = contents_dir / "Resources"
    
    # Create directories
    macos_dir.mkdir(parents=True, exist_ok=True)
    resources_dir.mkdir(parents=True, exist_ok=True)
    
    # Create Info.plist
    info_plist_content = self.generate_info_plist(display_name, phone_number, profile_name)
    with open(contents_dir / "Info.plist", 'w') as f:
      f.write(info_plist_content)
    
    # Create launcher script
    launcher_script = self.generate_launcher_script(phone_number, display_name)
    launcher_path = macos_dir / f"Signal-{display_name}"
    with open(launcher_path, 'w') as f:
      f.write(launcher_script)
    
    # Make launcher executable
    os.chmod(launcher_path, 0o755)
    
    # Copy Signal icon if available
    self.copy_signal_icon(resources_dir)
    
    print(f"‚úÖ App bundle created: {app_bundle_path}")
    return str(app_bundle_path)
  
  def generate_info_plist(self, display_name: str, phone_number: str, profile_name: str) -> str:
    """Generate Info.plist content for the app bundle"""
    return f'''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleDisplayName</key>
  <string>Signal ({display_name})</string>
  <key>CFBundleExecutable</key>
  <string>Signal-{display_name}</string>
  <key>CFBundleIconFile</key>
  <string>signal.icns</string>
  <key>CFBundleIdentifier</key>
  <string>org.signal.desktop.profile.{profile_name}</string>
  <key>CFBundleInfoDictionaryVersion</key>
  <string>6.0</string>
  <key>CFBundleName</key>
  <string>Signal-{display_name}</string>
  <key>CFBundlePackageType</key>
  <string>APPL</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0</string>
  <key>CFBundleVersion</key>
  <string>1.0</string>
  <key>LSMinimumSystemVersion</key>
  <string>10.13</string>
  <key>NSHighResolutionCapable</key>
  <true/>
  <key>NSHumanReadableCopyright</key>
  <string>Signal Profile Launcher for {phone_number}</string>
</dict>
</plist>'''
  
  def generate_launcher_script(self, phone_number: str, display_name: str) -> str:
    """Generate the launcher shell script"""
    # Create profile directory path
    profile_dir = phone_number.replace('+', '')
    user_data_dir = f"/Users/$USER/Library/Application Support/Signal-Profile-{profile_dir}"
    
    return f'''#!/bin/bash

# Signal Profile Launcher for {phone_number} ({display_name})
# Generated by Signal Registration Helper

PHONE_NUMBER="{phone_number}"
PROFILE_NAME="{display_name}"
PROFILE_DIR="{profile_dir}"
USER_DATA_DIR="{user_data_dir}"
SIGNAL_APP="/Applications/Signal.app/Contents/MacOS/Signal"

echo "üöÄ Launching Signal Desktop for $PHONE_NUMBER ($PROFILE_NAME)"
echo "üìÅ Profile directory: $USER_DATA_DIR"

# Check if Signal is installed
if [ ! -f "$SIGNAL_APP" ]; then
  echo "‚ùå Signal Desktop not found at: $SIGNAL_APP"
  echo "Please install Signal Desktop from: https://signal.org/download"
  exit 1
fi

# Create profile directory if it doesn't exist
if [ ! -d "$USER_DATA_DIR" ]; then
  echo "üìÅ Creating profile directory: $USER_DATA_DIR"
  mkdir -p "$USER_DATA_DIR"
fi

# Launch Signal with the specific profile
echo "‚úÖ Starting Signal Desktop..."
exec "$SIGNAL_APP" --user-data-dir="$USER_DATA_DIR"
'''
  
  def copy_signal_icon(self, resources_dir: Path):
    """Copy Signal's icon to the app bundle if available"""
    signal_icon_path = "/Applications/Signal.app/Contents/Resources/icon.icns"
    target_icon_path = resources_dir / "signal.icns"
    
    if os.path.exists(signal_icon_path):
      try:
        subprocess.run(['cp', signal_icon_path, str(target_icon_path)], check=True)
        print(f"üìé Copied Signal icon to app bundle")
      except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  Could not copy Signal icon (app will work without it)")
    else:
      print("‚ö†Ô∏è  Signal icon not found (app will work without it)")
  
  def test_app(self, app_path: str) -> bool:
    """Test if the created app launches correctly"""
    print(f"\nüß™ Testing app: {app_path}")
    
    if not os.path.exists(app_path):
      print(f"‚ùå App bundle not found: {app_path}")
      return False
    
    # Check if app bundle structure is correct
    contents_dir = Path(app_path) / "Contents"
    macos_dir = contents_dir / "MacOS"
    info_plist = contents_dir / "Info.plist"
    
    if not info_plist.exists():
      print("‚ùå Info.plist not found")
      return False
    
    # Find the executable
    executables = list(macos_dir.glob("Signal-*"))
    if not executables:
      print("‚ùå No executable found in MacOS directory")
      return False
    
    executable = executables[0]
    if not os.access(executable, os.X_OK):
      print(f"‚ùå Executable is not executable: {executable}")
      return False
    
    print("‚úÖ App bundle structure is valid")
    print(f"‚úÖ Executable found and is executable: {executable}")
    
    # Test dry run (don't actually launch Signal)
    print("üîç Testing launcher script (dry run)...")
    try:
      # Read the launcher script and check it's valid
      with open(executable, 'r') as f:
        script_content = f.read()
      
      if 'Signal Desktop' in script_content and 'user-data-dir' in script_content:
        print("‚úÖ Launcher script contains expected content")
      else:
        print("‚ùå Launcher script missing expected content")
        return False
      
      print("‚úÖ App is ready to use!")
      print(f"üìã To launch: open '{app_path}'")
      print(f"üìã Or double-click the app in Finder")
      
      return True
      
    except Exception as e:
      print(f"‚ùå Error testing launcher script: {e}")
      return False
  
  def launch_app(self, app_path: str):
    """Launch the created app"""
    print(f"üöÄ Launching app: {app_path}")
    try:
      subprocess.run(['open', app_path], check=True)
      print("‚úÖ App launched successfully!")
    except subprocess.CalledProcessError as e:
      print(f"‚ùå Failed to launch app: {e}")


def main():
  parser = argparse.ArgumentParser(
    description="Create a Signal Desktop .app launcher with specific profile",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog="""
Examples:
  # Create app for phone number (default name)
  python3 create_signal_app.py +15551112222
  
  # Create app with custom name
  python3 create_signal_app.py +15551112222 --name work
  
  # Create app with custom output directory
  python3 create_signal_app.py +15551112222 --output ~/Desktop
  
  # Create and test the app
  python3 create_signal_app.py +15551112222 --test
  
  # Create and immediately launch the app
  python3 create_signal_app.py +15551112222 --launch
  
  # Just test an existing app
  python3 create_signal_app.py --test-only Signal-work.app
    """
  )
  
  parser.add_argument('phone_number', nargs='?',
                     help='Phone number for Signal profile (e.g., +15551112222)')
  parser.add_argument('--name', '-n',
                     help='Custom name for the app (default: cleaned phone number)')
  parser.add_argument('--output', '-o',
                     help='Output directory for the .app file (default: current directory)')
  parser.add_argument('--test', action='store_true',
                     help='Test the created app after building')
  parser.add_argument('--launch', action='store_true',
                     help='Launch the app after creating it')
  parser.add_argument('--test-only',
                     help='Only test an existing app (provide app path)')
  
  args = parser.parse_args()
  
  builder = SignalAppBuilder()
  
  # Test-only mode
  if args.test_only:
    if builder.test_app(args.test_only):
      print("\nüéâ App test passed!")
      if input("\nWould you like to launch it? (y/n): ").lower().startswith('y'):
        builder.launch_app(args.test_only)
    else:
      print("\n‚ùå App test failed!")
      sys.exit(1)
    return
  
  # Require phone number for creation
  if not args.phone_number:
    print("‚ùå Phone number is required")
    parser.print_help()
    sys.exit(1)
  
  # Validate phone number format
  if not args.phone_number.startswith('+'):
    print("‚ùå Phone number should start with + (e.g., +15551112222)")
    sys.exit(1)
  
  # Show what we're creating
  if args.name:
    print(f"üèóÔ∏è  Creating Signal app '{args.name}' for {args.phone_number}")
  else:
    print(f"üèóÔ∏è  Creating Signal app for {args.phone_number}")
  
  # Create the app
  app_path = builder.create_app_bundle(args.phone_number, args.output, args.name)
  
  # Test if requested
  if args.test:
    if not builder.test_app(app_path):
      print("\n‚ùå App test failed!")
      sys.exit(1)
    print("\nüéâ App test passed!")
  
  # Launch if requested
  if args.launch:
    builder.launch_app(app_path)
  
  print(f"\n‚úÖ Complete! Your Signal app is ready:")
  print(f"üìÅ Location: {app_path}")
  print(f"üöÄ To launch: open '{app_path}'")
  print(f"üìã Or drag it to your Applications folder and double-click")


if __name__ == "__main__":
  main()
